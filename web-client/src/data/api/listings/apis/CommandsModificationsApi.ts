/* tslint:disable */
/* eslint-disable */
/**
 * Listings API
 * Describes the API of Listings service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddListing401Response,
  AddListingRequestBody,
  AddListingResponse,
  UpdateListingDetailsRequestBody,
} from '../models/index';
import {
    AddListing401ResponseFromJSON,
    AddListing401ResponseToJSON,
    AddListingRequestBodyFromJSON,
    AddListingRequestBodyToJSON,
    AddListingResponseFromJSON,
    AddListingResponseToJSON,
    UpdateListingDetailsRequestBodyFromJSON,
    UpdateListingDetailsRequestBodyToJSON,
} from '../models/index';

export interface AddListingRequest {
    addListingRequestBody: AddListingRequestBody;
}

export interface PublishListingRequest {
    listingId: string;
}

export interface UpdateListingDetailsRequest {
    listingId: string;
    updateListingDetailsRequestBody: UpdateListingDetailsRequestBody;
}

/**
 * 
 */
export class CommandsModificationsApi extends runtime.BaseAPI {

    /**
     * Add a new listing
     */
    async addListingRaw(requestParameters: AddListingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddListingResponse>> {
        if (requestParameters['addListingRequestBody'] == null) {
            throw new runtime.RequiredError(
                'addListingRequestBody',
                'Required parameter "addListingRequestBody" was null or undefined when calling addListing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/private/listings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddListingRequestBodyToJSON(requestParameters['addListingRequestBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddListingResponseFromJSON(jsonValue));
    }

    /**
     * Add a new listing
     */
    async addListing(requestParameters: AddListingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddListingResponse> {
        const response = await this.addListingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Publish the listing
     */
    async publishListingRaw(requestParameters: PublishListingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['listingId'] == null) {
            throw new runtime.RequiredError(
                'listingId',
                'Required parameter "listingId" was null or undefined when calling publishListing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/private/listings/{listingId}/publish`.replace(`{${"listingId"}}`, encodeURIComponent(String(requestParameters['listingId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Publish the listing
     */
    async publishListing(requestParameters: PublishListingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.publishListingRaw(requestParameters, initOverrides);
    }

    /**
     * Update listing details
     */
    async updateListingDetailsRaw(requestParameters: UpdateListingDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['listingId'] == null) {
            throw new runtime.RequiredError(
                'listingId',
                'Required parameter "listingId" was null or undefined when calling updateListingDetails().'
            );
        }

        if (requestParameters['updateListingDetailsRequestBody'] == null) {
            throw new runtime.RequiredError(
                'updateListingDetailsRequestBody',
                'Required parameter "updateListingDetailsRequestBody" was null or undefined when calling updateListingDetails().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/private/listings/{listingId}/update`.replace(`{${"listingId"}}`, encodeURIComponent(String(requestParameters['listingId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateListingDetailsRequestBodyToJSON(requestParameters['updateListingDetailsRequestBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update listing details
     */
    async updateListingDetails(requestParameters: UpdateListingDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateListingDetailsRaw(requestParameters, initOverrides);
    }

}
