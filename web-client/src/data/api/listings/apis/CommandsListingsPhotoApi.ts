/* tslint:disable */
/* eslint-disable */
/**
 * Listings API
 * Describes the API of Listings service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddListingPhotoRequestBody,
  AddListingPhotoResponseBody,
  GenerateUploadListingPhotoUrlRequestBody,
  GenerateUploadListingPhotoUrlResponseBody,
} from '../models/index';
import {
    AddListingPhotoRequestBodyFromJSON,
    AddListingPhotoRequestBodyToJSON,
    AddListingPhotoResponseBodyFromJSON,
    AddListingPhotoResponseBodyToJSON,
    GenerateUploadListingPhotoUrlRequestBodyFromJSON,
    GenerateUploadListingPhotoUrlRequestBodyToJSON,
    GenerateUploadListingPhotoUrlResponseBodyFromJSON,
    GenerateUploadListingPhotoUrlResponseBodyToJSON,
} from '../models/index';

export interface AddPhotoToListingRequest {
    listingId: string;
    addListingPhotoRequestBody: AddListingPhotoRequestBody;
}

export interface DeletePhotoRequest {
    listingId: string;
    photoId: string;
}

export interface GenerateUploadListingPhotoUrlRequest {
    listingId: string;
    generateUploadListingPhotoUrlRequestBody: GenerateUploadListingPhotoUrlRequestBody;
}

/**
 * 
 */
export class CommandsListingsPhotoApi extends runtime.BaseAPI {

    /**
     * Add photo to a listing
     */
    async addPhotoToListingRaw(requestParameters: AddPhotoToListingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddListingPhotoResponseBody>> {
        if (requestParameters['listingId'] == null) {
            throw new runtime.RequiredError(
                'listingId',
                'Required parameter "listingId" was null or undefined when calling addPhotoToListing().'
            );
        }

        if (requestParameters['addListingPhotoRequestBody'] == null) {
            throw new runtime.RequiredError(
                'addListingPhotoRequestBody',
                'Required parameter "addListingPhotoRequestBody" was null or undefined when calling addPhotoToListing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/private/listings/{listingId}/photos/add`.replace(`{${"listingId"}}`, encodeURIComponent(String(requestParameters['listingId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddListingPhotoRequestBodyToJSON(requestParameters['addListingPhotoRequestBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddListingPhotoResponseBodyFromJSON(jsonValue));
    }

    /**
     * Add photo to a listing
     */
    async addPhotoToListing(requestParameters: AddPhotoToListingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddListingPhotoResponseBody> {
        const response = await this.addPhotoToListingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete photo from a listing
     */
    async deletePhotoRaw(requestParameters: DeletePhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddListingPhotoResponseBody>> {
        if (requestParameters['listingId'] == null) {
            throw new runtime.RequiredError(
                'listingId',
                'Required parameter "listingId" was null or undefined when calling deletePhoto().'
            );
        }

        if (requestParameters['photoId'] == null) {
            throw new runtime.RequiredError(
                'photoId',
                'Required parameter "photoId" was null or undefined when calling deletePhoto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/private/listings/{listingId}/photos/{photoId}`.replace(`{${"listingId"}}`, encodeURIComponent(String(requestParameters['listingId']))).replace(`{${"photoId"}}`, encodeURIComponent(String(requestParameters['photoId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddListingPhotoResponseBodyFromJSON(jsonValue));
    }

    /**
     * Delete photo from a listing
     */
    async deletePhoto(requestParameters: DeletePhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddListingPhotoResponseBody> {
        const response = await this.deletePhotoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate upload form for listing photo
     */
    async generateUploadListingPhotoUrlRaw(requestParameters: GenerateUploadListingPhotoUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateUploadListingPhotoUrlResponseBody>> {
        if (requestParameters['listingId'] == null) {
            throw new runtime.RequiredError(
                'listingId',
                'Required parameter "listingId" was null or undefined when calling generateUploadListingPhotoUrl().'
            );
        }

        if (requestParameters['generateUploadListingPhotoUrlRequestBody'] == null) {
            throw new runtime.RequiredError(
                'generateUploadListingPhotoUrlRequestBody',
                'Required parameter "generateUploadListingPhotoUrlRequestBody" was null or undefined when calling generateUploadListingPhotoUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/private/listings/{listingId}/photos/get-upload-url`.replace(`{${"listingId"}}`, encodeURIComponent(String(requestParameters['listingId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateUploadListingPhotoUrlRequestBodyToJSON(requestParameters['generateUploadListingPhotoUrlRequestBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateUploadListingPhotoUrlResponseBodyFromJSON(jsonValue));
    }

    /**
     * Generate upload form for listing photo
     */
    async generateUploadListingPhotoUrl(requestParameters: GenerateUploadListingPhotoUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateUploadListingPhotoUrlResponseBody> {
        const response = await this.generateUploadListingPhotoUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
