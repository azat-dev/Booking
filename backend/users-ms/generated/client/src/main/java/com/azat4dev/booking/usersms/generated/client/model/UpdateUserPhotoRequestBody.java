/*
 * Users  API
 * Describes the API of Users Endpoint
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.azat4dev.booking.usersms.generated.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.azat4dev.booking.usersms.generated.client.model.UploadedFileDataDTO;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UpdateUserPhotoRequestBody
 */
@JsonPropertyOrder({
  UpdateUserPhotoRequestBody.JSON_PROPERTY_IDEMPOTENT_OPERATION_ID,
  UpdateUserPhotoRequestBody.JSON_PROPERTY_UPLOADED_FILE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-29T10:57:01.921409+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
public class UpdateUserPhotoRequestBody {
  public static final String JSON_PROPERTY_IDEMPOTENT_OPERATION_ID = "idempotentOperationId";
  private String idempotentOperationId;

  public static final String JSON_PROPERTY_UPLOADED_FILE = "uploadedFile";
  private UploadedFileDataDTO uploadedFile;

  public UpdateUserPhotoRequestBody() {
  }

  public UpdateUserPhotoRequestBody idempotentOperationId(String idempotentOperationId) {
    
    this.idempotentOperationId = idempotentOperationId;
    return this;
  }

   /**
   * Get idempotentOperationId
   * @return idempotentOperationId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IDEMPOTENT_OPERATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIdempotentOperationId() {
    return idempotentOperationId;
  }


  @JsonProperty(JSON_PROPERTY_IDEMPOTENT_OPERATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIdempotentOperationId(String idempotentOperationId) {
    this.idempotentOperationId = idempotentOperationId;
  }


  public UpdateUserPhotoRequestBody uploadedFile(UploadedFileDataDTO uploadedFile) {
    
    this.uploadedFile = uploadedFile;
    return this;
  }

   /**
   * Get uploadedFile
   * @return uploadedFile
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPLOADED_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UploadedFileDataDTO getUploadedFile() {
    return uploadedFile;
  }


  @JsonProperty(JSON_PROPERTY_UPLOADED_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadedFile(UploadedFileDataDTO uploadedFile) {
    this.uploadedFile = uploadedFile;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateUserPhotoRequestBody updateUserPhotoRequestBody = (UpdateUserPhotoRequestBody) o;
    return Objects.equals(this.idempotentOperationId, updateUserPhotoRequestBody.idempotentOperationId) &&
        Objects.equals(this.uploadedFile, updateUserPhotoRequestBody.uploadedFile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idempotentOperationId, uploadedFile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateUserPhotoRequestBody {\n");
    sb.append("    idempotentOperationId: ").append(toIndentedString(idempotentOperationId)).append("\n");
    sb.append("    uploadedFile: ").append(toIndentedString(uploadedFile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

