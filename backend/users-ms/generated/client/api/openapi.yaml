openapi: 3.0.0
info:
  description: Describes the API of Users Endpoint
  title: Users  API
  version: 1.0.0
servers:
- url: /
security:
- BearerAuth: []
paths:
  /api/public/verify-email:
    get:
      operationId: verifyEmail
      parameters:
      - in: path
        name: token
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/verifyEmail_200_response"
          description: Email verified
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/verifyEmail_400_response"
          description: Invalid token
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/verifyEmail_400_response"
          description: User not found
      summary: Send email for verification
      tags:
      - commandsEmailVerification
      x-accepts:
      - application/json
  /api/public/auth/sign-up:
    post:
      operationId: signUpByEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpByEmailRequestBody"
        description: JSON payload
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpByEmailResponseBody"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/verifyEmail_400_response"
          description: Wrong request
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithSameEmailAlreadyExistsErrorDTO"
          description: Conflict - User with provided email already exists
      security: []
      summary: Sign up a new user
      tags:
      - commandsSignUp
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/public/auth/login:
    post:
      operationId: loginByEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginByEmailRequestBody"
        description: JSON payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginByEmailResponseBody"
          description: Success
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/verifyEmail_400_response"
          description: User not found
      security: []
      summary: "Get a new pair of tokens by email (access, refresh)"
      tags:
      - commandsLogin
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/public/password/reset:
    post:
      operationId: resetPasswordByEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordByEmailRequestBody"
        description: JSON payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                default: Sent email with reset password instructions
                type: string
          description: Sent email with reset password instructions
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/verifyEmail_400_response"
          description: Not valid email
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/verifyEmail_400_response"
          description: Email not found
      security: []
      summary: Reset password by email
      tags:
      - commandsResetPassword
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/public/password/set-new:
    post:
      operationId: completeResetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompleteResetPasswordRequestBody"
        description: JSON payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                default: Set new password
                type: string
          description: Set new password
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/verifyEmail_400_response"
          description: Token is not valid
      security: []
      summary: Reset password by email
      tags:
      - commandsResetPassword
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/with-auth/users/current/photo/get-upload-url:
    post:
      operationId: generateUploadUserPhotoUrl
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateUploadUserPhotoUrlRequestBody"
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GenerateUploadUserPhotoUrlResponseBody"
          description: OK
      summary: Generate upload form for user photo
      tags:
      - commandsUpdateUserPhoto
      x-content-type: application/json
      x-accepts:
      - '*/*'
  /api/with-auth/users/current/photo/update:
    post:
      operationId: updateUserPhoto
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserPhotoRequestBody"
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                default: Photo updated
                type: string
          description: Photo updated
      summary: Attach uploaded photo to the user
      tags:
      - commandsUpdateUserPhoto
      x-content-type: application/json
      x-accepts:
      - '*/*'
  /api/with-auth/users/current:
    get:
      operationId: getCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonalUserInfoDTO"
          description: Current users info
        "401":
          description: User not authenticated
        "404":
          description: User not found
      summary: Gets current user info
      tags:
      - queriesCurrentUser
      x-accepts:
      - application/json
components:
  schemas:
    ValidationErrorDTO:
      example:
        type: validationError
        errors:
        - path: path
          code: code
          message: message
        - path: path
          code: code
          message: message
      properties:
        type:
          default: validationError
          type: string
        errors:
          items:
            $ref: "#/components/schemas/ValidationErrorDetailsDTO"
          type: array
      required:
      - errors
      - type
      type: object
    ValidationErrorDetailsDTO:
      example:
        path: path
        code: code
        message: message
      properties:
        path:
          type: string
        message:
          type: string
        code:
          type: string
      required:
      - code
      - message
      - path
      type: object
    ErrorDTO:
      properties:
        code:
          type: string
        message:
          type: string
      required:
      - code
      - message
      type: object
    SignUpByEmailRequestBody:
      example:
        password: password
        fullName:
          firstName: firstName
          lastName: lastName
        email: email
      properties:
        email:
          format: email
          type: string
        password:
          type: string
        fullName:
          $ref: "#/components/schemas/FullNameDTO"
      required:
      - email
      - fullName
      - password
      type: object
    SignUpByEmailResponseBody:
      example:
        tokens:
          access: access
          refresh: refresh
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        userId:
          format: uuid
          type: string
        tokens:
          $ref: "#/components/schemas/TokensPairDTO"
      required:
      - tokens
      - userId
      type: object
    TokensPairDTO:
      example:
        access: access
        refresh: refresh
      properties:
        access:
          type: string
        refresh:
          type: string
      required:
      - access
      - refresh
      type: object
    UserWithSameEmailAlreadyExistsErrorDTO:
      example:
        code: UserWithSameEmailAlreadyExists
        message: message
      properties:
        code:
          default: UserWithSameEmailAlreadyExists
          type: string
        message:
          type: string
      required:
      - code
      - message
      type: object
    LoginByEmailRequestBody:
      example:
        password: password
        email: email
      properties:
        email:
          format: email
          type: string
        password:
          type: string
      required:
      - email
      - password
      type: object
    LoginByEmailResponseBody:
      example:
        tokens:
          access: access
          refresh: refresh
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        userId:
          format: uuid
          type: string
        tokens:
          $ref: "#/components/schemas/TokensPairDTO"
      required:
      - tokens
      - userId
      type: object
    ResetPasswordByEmailRequestBody:
      example:
        operationId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        email: email
      properties:
        operationId:
          format: uuid
          type: string
        email:
          format: email
          type: string
      required:
      - email
      - operationId
      type: object
    CompleteResetPasswordRequestBody:
      example:
        resetPasswordToken: resetPasswordToken
        operationId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        newPassword: newPassword
      properties:
        operationId:
          format: uuid
          type: string
        newPassword:
          minLength: 1
          type: string
        resetPasswordToken:
          minLength: 1
          type: string
      required:
      - newPassword
      - operationId
      - resetPasswordToken
      type: object
    GenerateUploadUserPhotoUrlRequestBody:
      example:
        fileName: fileName
        fileSize: 0
        fileExtension: fileExtension
        operationId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        operationId:
          format: uuid
          type: string
        fileName:
          type: string
        fileExtension:
          maxLength: 10
          type: string
        fileSize:
          format: unsignedInt32
          type: integer
      type: object
    GenerateUploadUserPhotoUrlResponseBody:
      example:
        objectPath:
          bucketName: bucketName
          objectName: objectName
          url: url
        formData:
          key: formData
      properties:
        objectPath:
          $ref: "#/components/schemas/UploadedFileDataDTO"
        formData:
          additionalProperties:
            type: string
          type: object
      required:
      - formData
      - objectPath
      type: object
    UploadedFileDataDTO:
      example:
        bucketName: bucketName
        objectName: objectName
        url: url
      properties:
        url:
          type: string
        bucketName:
          type: string
        objectName:
          type: string
      required:
      - bucketName
      - objectName
      - url
      type: object
    UpdateUserPhotoRequestBody:
      example:
        operationId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        uploadedFile:
          bucketName: bucketName
          objectName: objectName
          url: url
      properties:
        operationId:
          format: uuid
          type: string
        uploadedFile:
          $ref: "#/components/schemas/UploadedFileDataDTO"
      required:
      - operationId
      - uploadedFile
      type: object
    PersonalUserInfoDTO:
      example:
        fullName:
          firstName: firstName
          lastName: lastName
        photo:
          url: url
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        emailVerificationStatus: VERIFIED
        email: email
      properties:
        id:
          format: uuid
          type: string
        fullName:
          $ref: "#/components/schemas/FullNameDTO"
        email:
          format: email
          type: string
        photo:
          $ref: "#/components/schemas/PhotoPathDTO"
        emailVerificationStatus:
          $ref: "#/components/schemas/EmailVerificationStatusDTO"
      required:
      - email
      - emailVerificationStatus
      - fullName
      - id
      type: object
    FullNameDTO:
      example:
        firstName: firstName
        lastName: lastName
      properties:
        firstName:
          maxLength: 255
          minLength: 1
          type: string
        lastName:
          maxLength: 255
          minLength: 1
          type: string
      required:
      - firstName
      - lastName
      type: object
    UserIdDTO:
      format: uuid
      type: string
    OperationIdDTO:
      format: uuid
      type: string
    PhotoPathDTO:
      example:
        url: url
      properties:
        url:
          type: string
      type: object
    EmailVerificationStatusDTO:
      enum:
      - VERIFIED
      - NOT_VERIFIED
      type: string
    verifyEmail_200_response:
      example:
        message: Email verified
      properties:
        message:
          default: Email verified
          type: string
      type: object
    verifyEmail_400_response:
      oneOf:
      - $ref: "#/components/schemas/ValidationErrorDTO"
      - $ref: "#/components/schemas/ErrorDTO"
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http

