/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.azat4dev.booking.usersms.generated.server.api;

import com.azat4dev.booking.usersms.generated.server.model.SignUpByEmailRequestBody;
import com.azat4dev.booking.usersms.generated.server.model.SignUpByEmailResponseBody;
import com.azat4dev.booking.usersms.generated.server.model.UserWithSameEmailAlreadyExistsErrorDTO;
import com.azat4dev.booking.usersms.generated.server.model.VerifyEmail400Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-30T01:15:09.334912+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "commandsSignUp", description = "the commandsSignUp API")
public interface CommandsSignUpApi {

    default CommandsSignUpApiDelegate getDelegate() {
        return new CommandsSignUpApiDelegate() {};
    }

    /**
     * POST /api/public/auth/sign-up : Sign up a new user
     *
     * @param signUpByEmailRequestBody JSON payload (required)
     * @return Success (status code 201)
     *         or Wrong request (status code 400)
     *         or Conflict - User with provided email already exists (status code 409)
     */
    @Operation(
        operationId = "signUpByEmail",
        summary = "Sign up a new user",
        tags = { "commandsSignUp" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SignUpByEmailResponseBody.class))
            }),
            @ApiResponse(responseCode = "400", description = "Wrong request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VerifyEmail400Response.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict - User with provided email already exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserWithSameEmailAlreadyExistsErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/public/auth/sign-up",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SignUpByEmailResponseBody> signUpByEmail(
        @Parameter(name = "SignUpByEmailRequestBody", description = "JSON payload", required = true) @Valid @RequestBody SignUpByEmailRequestBody signUpByEmailRequestBody
    ) {
        return getDelegate().signUpByEmail(signUpByEmailRequestBody);
    }

}
