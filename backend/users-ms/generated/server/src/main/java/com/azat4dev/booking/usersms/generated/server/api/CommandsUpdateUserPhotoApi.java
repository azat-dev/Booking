/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.azat4dev.booking.usersms.generated.server.api;

import com.azat4dev.booking.usersms.generated.server.model.GenerateUploadUserPhotoUrlRequestBody;
import com.azat4dev.booking.usersms.generated.server.model.GenerateUploadUserPhotoUrlResponseBody;
import com.azat4dev.booking.usersms.generated.server.model.UpdateUserPhotoRequestBody;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-30T01:15:09.334912+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "commandsUpdateUserPhoto", description = "the commandsUpdateUserPhoto API")
public interface CommandsUpdateUserPhotoApi {

    default CommandsUpdateUserPhotoApiDelegate getDelegate() {
        return new CommandsUpdateUserPhotoApiDelegate() {};
    }

    /**
     * POST /api/with-auth/users/current/photo/get-upload-url : Generate upload form for user photo
     *
     * @param generateUploadUserPhotoUrlRequestBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "generateUploadUserPhotoUrl",
        summary = "Generate upload form for user photo",
        tags = { "commandsUpdateUserPhoto" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = GenerateUploadUserPhotoUrlResponseBody.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/with-auth/users/current/photo/get-upload-url",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GenerateUploadUserPhotoUrlResponseBody> generateUploadUserPhotoUrl(
        @Parameter(name = "GenerateUploadUserPhotoUrlRequestBody", description = "", required = true) @Valid @RequestBody GenerateUploadUserPhotoUrlRequestBody generateUploadUserPhotoUrlRequestBody
    ) {
        return getDelegate().generateUploadUserPhotoUrl(generateUploadUserPhotoUrlRequestBody);
    }


    /**
     * POST /api/with-auth/users/current/photo/update : Attach uploaded photo to the user
     *
     * @param updateUserPhotoRequestBody  (required)
     * @return Photo updated (status code 200)
     */
    @Operation(
        operationId = "updateUserPhoto",
        summary = "Attach uploaded photo to the user",
        tags = { "commandsUpdateUserPhoto" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Photo updated", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/with-auth/users/current/photo/update",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> updateUserPhoto(
        @Parameter(name = "UpdateUserPhotoRequestBody", description = "", required = true) @Valid @RequestBody UpdateUserPhotoRequestBody updateUserPhotoRequestBody
    ) {
        return getDelegate().updateUserPhoto(updateUserPhotoRequestBody);
    }

}
