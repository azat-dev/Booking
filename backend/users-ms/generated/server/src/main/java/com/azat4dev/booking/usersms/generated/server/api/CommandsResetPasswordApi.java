/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.azat4dev.booking.usersms.generated.server.api;

import com.azat4dev.booking.usersms.generated.server.model.CompleteResetPassword200Response;
import com.azat4dev.booking.usersms.generated.server.model.CompleteResetPasswordRequestBody;
import com.azat4dev.booking.usersms.generated.server.model.ResetPasswordByEmail200Response;
import com.azat4dev.booking.usersms.generated.server.model.ResetPasswordByEmailRequestBody;
import com.azat4dev.booking.usersms.generated.server.model.VerifyEmail400Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-30T09:25:21.695569+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "commandsResetPassword", description = "the commandsResetPassword API")
public interface CommandsResetPasswordApi {

    default CommandsResetPasswordApiDelegate getDelegate() {
        return new CommandsResetPasswordApiDelegate() {};
    }

    /**
     * POST /api/public/password/set-new : Reset password by email
     *
     * @param completeResetPasswordRequestBody JSON payload (required)
     * @return Set new password (status code 200)
     *         or Token is not valid (status code 403)
     */
    @Operation(
        operationId = "completeResetPassword",
        summary = "Reset password by email",
        tags = { "commandsResetPassword" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Set new password", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CompleteResetPassword200Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "Token is not valid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VerifyEmail400Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/public/password/set-new",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CompleteResetPassword200Response> completeResetPassword(
        @Parameter(name = "CompleteResetPasswordRequestBody", description = "JSON payload", required = true) @Valid @RequestBody CompleteResetPasswordRequestBody completeResetPasswordRequestBody
    ) {
        return getDelegate().completeResetPassword(completeResetPasswordRequestBody);
    }


    /**
     * POST /api/public/password/reset : Reset password by email
     *
     * @param resetPasswordByEmailRequestBody JSON payload (required)
     * @return Sent email with reset password instructions (status code 200)
     *         or Not valid email (status code 401)
     *         or Email not found (status code 404)
     */
    @Operation(
        operationId = "resetPasswordByEmail",
        summary = "Reset password by email",
        tags = { "commandsResetPassword" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sent email with reset password instructions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResetPasswordByEmail200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Not valid email", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VerifyEmail400Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Email not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VerifyEmail400Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/public/password/reset",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ResetPasswordByEmail200Response> resetPasswordByEmail(
        @Parameter(name = "ResetPasswordByEmailRequestBody", description = "JSON payload", required = true) @Valid @RequestBody ResetPasswordByEmailRequestBody resetPasswordByEmailRequestBody
    ) {
        return getDelegate().resetPasswordByEmail(resetPasswordByEmailRequestBody);
    }

}
