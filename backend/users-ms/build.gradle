import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.openapi.generator' version '7.6.0'
}

ext {
    springCloudVersion = "2023.0.2"
}

group = 'com.azat4dev'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

dependencies {

    implementation project(path: ':shared')
    testImplementation project(path: ':apiclient')

    // Spring Boot
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    testImplementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // Minio
    implementation 'io.minio:minio:8.5.10'
    testImplementation("org.testcontainers:minio:1.19.8")

    // Kafka
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    implementation 'org.springframework.kafka:spring-kafka'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Postgres
    implementation 'org.postgresql:postgresql'
    testImplementation 'org.postgresql:postgresql'

    // OpenAPI
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.21'
    implementation 'io.swagger.core.v3:swagger-models:2.2.21'

    implementation 'com.sun.mail:jakarta.mail:2.0.1'

    implementation 'commons-validator:commons-validator:1.8.0'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    implementation 'org.hibernate.validator:hibernate-validator'

    testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
    testImplementation "org.testcontainers:testcontainers:1.19.8"
    testImplementation "org.testcontainers:junit-jupiter:1.19.8"
    testImplementation "org.testcontainers:postgresql:1.19.8"

    testImplementation('com.github.javafaker:javafaker:1.0.2') {
        exclude group: 'org.yaml', module: 'snakeyaml'
    }

    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.jsoup:jsoup:1.14.3'

    implementation 'org.springframework.data:spring-data-commons'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.core:jackson-databind'

}

tasks.named('test') {
    useJUnitPlatform()
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/server/src/main/java"
            srcDirs += "$buildDir/generated/events/src/main/java"
        }
    }
}

task generateServerApi(type: GenerateTask) {
    generatorName.set("spring")
    library.set("spring-boot")
    inputSpec.set("$rootDir/../specs/users/openapi.yaml")
    outputDir.set("$buildDir/generated/server")
    invokerPackage.set("com.azat4dev.booking.usersms.generated.server.base")
    apiPackage.set("com.azat4dev.booking.usersms.generated.server.api")
    modelPackage.set("com.azat4dev.booking.usersms.generated.server.model")
    packageName.set("com.azat4dev.booking.usersms.generated.server")
    ignoreFileOverride.set(".openapi-generator-ignore")
    modelNameSuffix.set("DTO")
    configOptions.set([
            useOptional: "true",
            unhandledException: "true",
            openApiNullable: "false",
            interfaceOnly: "false",
            additionalModelTypeAnnotations: "@lombok.Builder(toBuilder = true)\n@lombok.AllArgsConstructor\n@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown=true)",
            generatedConstructorWithRequiredArgs: "false",
            useTags: "true",

            dateLibrary: "java8-localdatetime",
            generateConstructorWithAllArgs: "false",
            serializationLibrary: "jackson",
            useSpringBoot3: "true",
            delegatePattern: "true",
            generateBuilders: "false",
            useSpringController: "false"
    ])
}

task generateApiClient(type: GenerateTask) {
    generatorName.set("java")
    library.set("feign")
    inputSpec.set("$rootDir/../specs/users/openapi.yaml")
    outputDir.set("$buildDir/generated/client")
    invokerPackage.set("com.azat4dev.booking.usersms.generated.client.base")
    apiPackage.set("com.azat4dev.booking.usersms.generated.client.api")
    modelPackage.set("com.azat4dev.booking.usersms.generated.client.model")
    packageName.set("com.azat4dev.booking.usersms.generated.client")
    ignoreFileOverride.set(".openapi-generator-ignore")
    modelNameSuffix.set("DTO")
    configOptions.set([
            useOptional: "true",
            generateConstructorWithAllArgs: "true",
            generateBuilders: "true",
            useTags: "true",
    ])
}

task generateDomainEventsDTO(type: GenerateTask) {
    generatorName.set("spring")
    library.set("spring-boot")
    inputSpec.set("$rootDir/../specs/events/users/openapi.yaml")
    outputDir.set("$buildDir/generated/events")
    modelPackage.set("com.azat4dev.booking.generated.events.dto")
    ignoreFileOverride.set(".openapi-generator-ignore")
    templateDir.set("$rootDir/../specs/custom_templates/spring")
    modelNameSuffix.set("DTO")
    configOptions.set([
            useOptional: "true",
            openApiNullable: "false",
            interfaceOnly: "true",
            additionalModelTypeAnnotations: "@lombok.Builder(toBuilder = true)\n@lombok.AllArgsConstructor\n@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown=true)",
            generatedConstructorWithRequiredArgs: "false",
            useTags: "true",
            generateSupportingFiles: "false",

            dateLibrary: "java8-localdatetime",
            generateConstructorWithAllArgs: "false",

            serializationLibrary: "jackson",
            generateBuilders: "false",
            useSpringController: "false",
            useJakartaEe: "true"
    ])
}

task generateCodeFromOpenApiSpecs(dependsOn: ['generateApiClient', 'generateServerApi', 'generateDomainEventsDTO'])

tasks.named("bootBuildImage") {
    imageName = "azat4dev/booking-users-ms"
}

tasks.withType(JavaCompile) {
    dependsOn 'generateDomainEventsDTO', 'generateServerApi'
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}