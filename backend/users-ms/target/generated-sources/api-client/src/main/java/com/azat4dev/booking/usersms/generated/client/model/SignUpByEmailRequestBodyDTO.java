/*
 * Users  API
 * Describes the API of Users Endpoint
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.azat4dev.booking.usersms.generated.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.azat4dev.booking.usersms.generated.client.model.FullNameDTO;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SignUpByEmailRequestBodyDTO
 */
@JsonPropertyOrder({
  SignUpByEmailRequestBodyDTO.JSON_PROPERTY_EMAIL,
  SignUpByEmailRequestBodyDTO.JSON_PROPERTY_PASSWORD,
  SignUpByEmailRequestBodyDTO.JSON_PROPERTY_FULL_NAME
})
@JsonTypeName("SignUpByEmailRequestBody")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-14T09:11:45.773021+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
public class SignUpByEmailRequestBodyDTO {
  public static final String JSON_PROPERTY_EMAIL = "email";
  private String email;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;

  public static final String JSON_PROPERTY_FULL_NAME = "fullName";
  private FullNameDTO fullName;

  public SignUpByEmailRequestBodyDTO() {
  }

  /**
  * Constructor with all args parameters
  */
  public SignUpByEmailRequestBodyDTO(@JsonProperty(JSON_PROPERTY_EMAIL) String email, @JsonProperty(JSON_PROPERTY_PASSWORD) String password, @JsonProperty(JSON_PROPERTY_FULL_NAME) FullNameDTO fullName) {
    this.email = email;
    this.password = password;
    this.fullName = fullName;
  }

  public SignUpByEmailRequestBodyDTO email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEmail() {
    return email;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmail(String email) {
    this.email = email;
  }

  public SignUpByEmailRequestBodyDTO password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPassword(String password) {
    this.password = password;
  }

  public SignUpByEmailRequestBodyDTO fullName(FullNameDTO fullName) {
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FullNameDTO getFullName() {
    return fullName;
  }


  @JsonProperty(JSON_PROPERTY_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFullName(FullNameDTO fullName) {
    this.fullName = fullName;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignUpByEmailRequestBodyDTO signUpByEmailRequestBody = (SignUpByEmailRequestBodyDTO) o;
    return Objects.equals(this.email, signUpByEmailRequestBody.email) &&
        Objects.equals(this.password, signUpByEmailRequestBody.password) &&
        Objects.equals(this.fullName, signUpByEmailRequestBody.fullName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, password, fullName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignUpByEmailRequestBodyDTO {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private SignUpByEmailRequestBodyDTO instance;

    public Builder() {
      this(new SignUpByEmailRequestBodyDTO());
    }

    protected Builder(SignUpByEmailRequestBodyDTO instance) {
      this.instance = instance;
    }

    public SignUpByEmailRequestBodyDTO.Builder email(String email) {
      this.instance.email = email;
      return this;
    }
    public SignUpByEmailRequestBodyDTO.Builder password(String password) {
      this.instance.password = password;
      return this;
    }
    public SignUpByEmailRequestBodyDTO.Builder fullName(FullNameDTO fullName) {
      this.instance.fullName = fullName;
      return this;
    }


    /**
    * returns a built SignUpByEmailRequestBodyDTO instance.
    *
    * The builder is not reusable.
    */
    public SignUpByEmailRequestBodyDTO build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static SignUpByEmailRequestBodyDTO.Builder builder() {
    return new SignUpByEmailRequestBodyDTO.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public SignUpByEmailRequestBodyDTO.Builder toBuilder() {
    return new SignUpByEmailRequestBodyDTO.Builder()
      .email(getEmail())
      .password(getPassword())
      .fullName(getFullName());
  }


}

