/*
 * Users  API
 * Describes the API of Users Endpoint
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.azat4dev.booking.usersms.generated.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * GenerateUploadUserPhotoUrlRequestBodyDTO
 */
@JsonPropertyOrder({
  GenerateUploadUserPhotoUrlRequestBodyDTO.JSON_PROPERTY_OPERATION_ID,
  GenerateUploadUserPhotoUrlRequestBodyDTO.JSON_PROPERTY_FILE_NAME,
  GenerateUploadUserPhotoUrlRequestBodyDTO.JSON_PROPERTY_FILE_EXTENSION,
  GenerateUploadUserPhotoUrlRequestBodyDTO.JSON_PROPERTY_FILE_SIZE
})
@JsonTypeName("GenerateUploadUserPhotoUrlRequestBody")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-14T09:11:45.773021+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
public class GenerateUploadUserPhotoUrlRequestBodyDTO {
  public static final String JSON_PROPERTY_OPERATION_ID = "operationId";
  private UUID operationId;

  public static final String JSON_PROPERTY_FILE_NAME = "fileName";
  private String fileName;

  public static final String JSON_PROPERTY_FILE_EXTENSION = "fileExtension";
  private String fileExtension;

  public static final String JSON_PROPERTY_FILE_SIZE = "fileSize";
  private Integer fileSize;

  public GenerateUploadUserPhotoUrlRequestBodyDTO() {
  }

  /**
  * Constructor with all args parameters
  */
  public GenerateUploadUserPhotoUrlRequestBodyDTO(@JsonProperty(JSON_PROPERTY_OPERATION_ID) UUID operationId, @JsonProperty(JSON_PROPERTY_FILE_NAME) String fileName, @JsonProperty(JSON_PROPERTY_FILE_EXTENSION) String fileExtension, @JsonProperty(JSON_PROPERTY_FILE_SIZE) Integer fileSize) {
    this.operationId = operationId;
    this.fileName = fileName;
    this.fileExtension = fileExtension;
    this.fileSize = fileSize;
  }

  public GenerateUploadUserPhotoUrlRequestBodyDTO operationId(UUID operationId) {
    
    this.operationId = operationId;
    return this;
  }

   /**
   * Get operationId
   * @return operationId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OPERATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getOperationId() {
    return operationId;
  }


  @JsonProperty(JSON_PROPERTY_OPERATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOperationId(UUID operationId) {
    this.operationId = operationId;
  }

  public GenerateUploadUserPhotoUrlRequestBodyDTO fileName(String fileName) {
    
    this.fileName = fileName;
    return this;
  }

   /**
   * Get fileName
   * @return fileName
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFileName() {
    return fileName;
  }


  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public GenerateUploadUserPhotoUrlRequestBodyDTO fileExtension(String fileExtension) {
    
    this.fileExtension = fileExtension;
    return this;
  }

   /**
   * Get fileExtension
   * @return fileExtension
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILE_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFileExtension() {
    return fileExtension;
  }


  @JsonProperty(JSON_PROPERTY_FILE_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFileExtension(String fileExtension) {
    this.fileExtension = fileExtension;
  }

  public GenerateUploadUserPhotoUrlRequestBodyDTO fileSize(Integer fileSize) {
    
    this.fileSize = fileSize;
    return this;
  }

   /**
   * Get fileSize
   * @return fileSize
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILE_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFileSize() {
    return fileSize;
  }


  @JsonProperty(JSON_PROPERTY_FILE_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFileSize(Integer fileSize) {
    this.fileSize = fileSize;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateUploadUserPhotoUrlRequestBodyDTO generateUploadUserPhotoUrlRequestBody = (GenerateUploadUserPhotoUrlRequestBodyDTO) o;
    return Objects.equals(this.operationId, generateUploadUserPhotoUrlRequestBody.operationId) &&
        Objects.equals(this.fileName, generateUploadUserPhotoUrlRequestBody.fileName) &&
        Objects.equals(this.fileExtension, generateUploadUserPhotoUrlRequestBody.fileExtension) &&
        Objects.equals(this.fileSize, generateUploadUserPhotoUrlRequestBody.fileSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operationId, fileName, fileExtension, fileSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateUploadUserPhotoUrlRequestBodyDTO {\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileExtension: ").append(toIndentedString(fileExtension)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private GenerateUploadUserPhotoUrlRequestBodyDTO instance;

    public Builder() {
      this(new GenerateUploadUserPhotoUrlRequestBodyDTO());
    }

    protected Builder(GenerateUploadUserPhotoUrlRequestBodyDTO instance) {
      this.instance = instance;
    }

    public GenerateUploadUserPhotoUrlRequestBodyDTO.Builder operationId(UUID operationId) {
      this.instance.operationId = operationId;
      return this;
    }
    public GenerateUploadUserPhotoUrlRequestBodyDTO.Builder fileName(String fileName) {
      this.instance.fileName = fileName;
      return this;
    }
    public GenerateUploadUserPhotoUrlRequestBodyDTO.Builder fileExtension(String fileExtension) {
      this.instance.fileExtension = fileExtension;
      return this;
    }
    public GenerateUploadUserPhotoUrlRequestBodyDTO.Builder fileSize(Integer fileSize) {
      this.instance.fileSize = fileSize;
      return this;
    }


    /**
    * returns a built GenerateUploadUserPhotoUrlRequestBodyDTO instance.
    *
    * The builder is not reusable.
    */
    public GenerateUploadUserPhotoUrlRequestBodyDTO build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static GenerateUploadUserPhotoUrlRequestBodyDTO.Builder builder() {
    return new GenerateUploadUserPhotoUrlRequestBodyDTO.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public GenerateUploadUserPhotoUrlRequestBodyDTO.Builder toBuilder() {
    return new GenerateUploadUserPhotoUrlRequestBodyDTO.Builder()
      .operationId(getOperationId())
      .fileName(getFileName())
      .fileExtension(getFileExtension())
      .fileSize(getFileSize());
  }


}

