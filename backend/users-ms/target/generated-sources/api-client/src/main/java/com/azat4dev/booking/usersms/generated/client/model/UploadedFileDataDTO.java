/*
 * Users  API
 * Describes the API of Users Endpoint
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.azat4dev.booking.usersms.generated.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UploadedFileDataDTO
 */
@JsonPropertyOrder({
  UploadedFileDataDTO.JSON_PROPERTY_URL,
  UploadedFileDataDTO.JSON_PROPERTY_BUCKET_NAME,
  UploadedFileDataDTO.JSON_PROPERTY_OBJECT_NAME
})
@JsonTypeName("UploadedFileData")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-14T09:11:45.773021+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
public class UploadedFileDataDTO {
  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public static final String JSON_PROPERTY_BUCKET_NAME = "bucketName";
  private String bucketName;

  public static final String JSON_PROPERTY_OBJECT_NAME = "objectName";
  private String objectName;

  public UploadedFileDataDTO() {
  }

  /**
  * Constructor with all args parameters
  */
  public UploadedFileDataDTO(@JsonProperty(JSON_PROPERTY_URL) String url, @JsonProperty(JSON_PROPERTY_BUCKET_NAME) String bucketName, @JsonProperty(JSON_PROPERTY_OBJECT_NAME) String objectName) {
    this.url = url;
    this.bucketName = bucketName;
    this.objectName = objectName;
  }

  public UploadedFileDataDTO url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(String url) {
    this.url = url;
  }

  public UploadedFileDataDTO bucketName(String bucketName) {
    
    this.bucketName = bucketName;
    return this;
  }

   /**
   * Get bucketName
   * @return bucketName
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BUCKET_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBucketName() {
    return bucketName;
  }


  @JsonProperty(JSON_PROPERTY_BUCKET_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBucketName(String bucketName) {
    this.bucketName = bucketName;
  }

  public UploadedFileDataDTO objectName(String objectName) {
    
    this.objectName = objectName;
    return this;
  }

   /**
   * Get objectName
   * @return objectName
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OBJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getObjectName() {
    return objectName;
  }


  @JsonProperty(JSON_PROPERTY_OBJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setObjectName(String objectName) {
    this.objectName = objectName;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadedFileDataDTO uploadedFileData = (UploadedFileDataDTO) o;
    return Objects.equals(this.url, uploadedFileData.url) &&
        Objects.equals(this.bucketName, uploadedFileData.bucketName) &&
        Objects.equals(this.objectName, uploadedFileData.objectName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, bucketName, objectName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadedFileDataDTO {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    bucketName: ").append(toIndentedString(bucketName)).append("\n");
    sb.append("    objectName: ").append(toIndentedString(objectName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private UploadedFileDataDTO instance;

    public Builder() {
      this(new UploadedFileDataDTO());
    }

    protected Builder(UploadedFileDataDTO instance) {
      this.instance = instance;
    }

    public UploadedFileDataDTO.Builder url(String url) {
      this.instance.url = url;
      return this;
    }
    public UploadedFileDataDTO.Builder bucketName(String bucketName) {
      this.instance.bucketName = bucketName;
      return this;
    }
    public UploadedFileDataDTO.Builder objectName(String objectName) {
      this.instance.objectName = objectName;
      return this;
    }


    /**
    * returns a built UploadedFileDataDTO instance.
    *
    * The builder is not reusable.
    */
    public UploadedFileDataDTO build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static UploadedFileDataDTO.Builder builder() {
    return new UploadedFileDataDTO.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public UploadedFileDataDTO.Builder toBuilder() {
    return new UploadedFileDataDTO.Builder()
      .url(getUrl())
      .bucketName(getBucketName())
      .objectName(getObjectName());
  }


}

