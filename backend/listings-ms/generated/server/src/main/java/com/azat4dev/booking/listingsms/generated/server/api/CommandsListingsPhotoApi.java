/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.azat4dev.booking.listingsms.generated.server.api;

import com.azat4dev.booking.listingsms.generated.server.model.AddListingPhotoRequestBody;
import com.azat4dev.booking.listingsms.generated.server.model.AddListingPhotoResponseBody;
import com.azat4dev.booking.listingsms.generated.server.model.GenerateUploadListingPhotoUrlRequestBody;
import com.azat4dev.booking.listingsms.generated.server.model.GenerateUploadListingPhotoUrlResponseBody;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-01T00:08:26.456416+03:00[Europe/Moscow]")
@Validated
@Tag(name = "commandsListingsPhoto", description = "the commandsListingsPhoto API")
public interface CommandsListingsPhotoApi {

    default CommandsListingsPhotoApiDelegate getDelegate() {
        return new CommandsListingsPhotoApiDelegate() {};
    }

    /**
     * POST /api/private/listings/{listingId}/photos/add : Add photo to a listing
     *
     * @param listingId Listing Id (required)
     * @param addListingPhotoRequestBody  (required)
     * @return Photo attached (status code 200)
     *         or User is not authorized (status code 403)
     */
    @Operation(
        operationId = "addPhotoToListing",
        summary = "Add photo to a listing",
        tags = { "commandsListingsPhoto" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Photo attached", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AddListingPhotoResponseBody.class))
            }),
            @ApiResponse(responseCode = "403", description = "User is not authorized")
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/private/listings/{listingId}/photos/add",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AddListingPhotoResponseBody> addPhotoToListing(
        @Parameter(name = "listingId", description = "Listing Id", required = true, in = ParameterIn.PATH) @PathVariable("listingId") UUID listingId,
        @Parameter(name = "AddListingPhotoRequestBody", description = "", required = true) @Valid @RequestBody AddListingPhotoRequestBody addListingPhotoRequestBody
    ) {
        return getDelegate().addPhotoToListing(listingId, addListingPhotoRequestBody);
    }


    /**
     * DELETE /api/private/listings/{listingId}/photos/{photoId} : Delete photo from a listing
     *
     * @param listingId Listing Id (required)
     * @param photoId Listing Id (required)
     * @return Photo attached (status code 204)
     *         or User is not authorized (status code 403)
     */
    @Operation(
        operationId = "deletePhoto",
        summary = "Delete photo from a listing",
        tags = { "commandsListingsPhoto" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Photo attached", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AddListingPhotoResponseBody.class))
            }),
            @ApiResponse(responseCode = "403", description = "User is not authorized")
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/private/listings/{listingId}/photos/{photoId}",
        produces = { "application/json" }
    )
    default ResponseEntity<AddListingPhotoResponseBody> deletePhoto(
        @Parameter(name = "listingId", description = "Listing Id", required = true, in = ParameterIn.PATH) @PathVariable("listingId") UUID listingId,
        @Parameter(name = "photoId", description = "Listing Id", required = true, in = ParameterIn.PATH) @PathVariable("photoId") UUID photoId
    ) {
        return getDelegate().deletePhoto(listingId, photoId);
    }


    /**
     * POST /api/private/listings/{listingId}/photos/get-upload-url : Generate upload form for listing photo
     *
     * @param listingId Listing Id (required)
     * @param generateUploadListingPhotoUrlRequestBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "generateUploadListingPhotoUrl",
        summary = "Generate upload form for listing photo",
        tags = { "commandsListingsPhoto" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateUploadListingPhotoUrlResponseBody.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/private/listings/{listingId}/photos/get-upload-url",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GenerateUploadListingPhotoUrlResponseBody> generateUploadListingPhotoUrl(
        @Parameter(name = "listingId", description = "Listing Id", required = true, in = ParameterIn.PATH) @PathVariable("listingId") UUID listingId,
        @Parameter(name = "GenerateUploadListingPhotoUrlRequestBody", description = "", required = true) @Valid @RequestBody GenerateUploadListingPhotoUrlRequestBody generateUploadListingPhotoUrlRequestBody
    ) {
        return getDelegate().generateUploadListingPhotoUrl(listingId, generateUploadListingPhotoUrlRequestBody);
    }

}
