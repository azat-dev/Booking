/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import jakarta.annotation.Nullable;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.records.OutboxEventsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OutboxEvents extends TableImpl<OutboxEventsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.outbox_events</code>
     */
    public static final OutboxEvents OUTBOX_EVENTS = new OutboxEvents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OutboxEventsRecord> getRecordType() {
        return OutboxEventsRecord.class;
    }

    /**
     * The column <code>public.outbox_events.event_order</code>.
     */
    public final TableField<OutboxEventsRecord, Long> EVENT_ORDER = createField(DSL.name("event_order"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.outbox_events.event_id</code>.
     */
    public final TableField<OutboxEventsRecord, String> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.outbox_events.created_at</code>.
     */
    public final TableField<OutboxEventsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.outbox_events.created_at_nano</code>.
     */
    public final TableField<OutboxEventsRecord, Integer> CREATED_AT_NANO = createField(DSL.name("created_at_nano"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.outbox_events.event_type</code>.
     */
    public final TableField<OutboxEventsRecord, String> EVENT_TYPE = createField(DSL.name("event_type"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.outbox_events.payload</code>.
     */
    public final TableField<OutboxEventsRecord, String> PAYLOAD = createField(DSL.name("payload"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.outbox_events.is_published</code>.
     */
    public final TableField<OutboxEventsRecord, Boolean> IS_PUBLISHED = createField(DSL.name("is_published"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private OutboxEvents(Name alias, Table<OutboxEventsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OutboxEvents(Name alias, Table<OutboxEventsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.outbox_events</code> table reference
     */
    public OutboxEvents(String alias) {
        this(DSL.name(alias), OUTBOX_EVENTS);
    }

    /**
     * Create an aliased <code>public.outbox_events</code> table reference
     */
    public OutboxEvents(Name alias) {
        this(alias, OUTBOX_EVENTS);
    }

    /**
     * Create a <code>public.outbox_events</code> table reference
     */
    public OutboxEvents() {
        this(DSL.name("outbox_events"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<OutboxEventsRecord, Long> getIdentity() {
        return (Identity<OutboxEventsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OutboxEventsRecord> getPrimaryKey() {
        return Keys.OUTBOX_EVENTS_PKEY;
    }

    @Override
    public OutboxEvents as(String alias) {
        return new OutboxEvents(DSL.name(alias), this);
    }

    @Override
    public OutboxEvents as(Name alias) {
        return new OutboxEvents(alias, this);
    }

    @Override
    public OutboxEvents as(Table<?> alias) {
        return new OutboxEvents(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OutboxEvents rename(String name) {
        return new OutboxEvents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OutboxEvents rename(Name name) {
        return new OutboxEvents(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OutboxEvents rename(Table<?> name) {
        return new OutboxEvents(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OutboxEvents where(Condition condition) {
        return new OutboxEvents(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OutboxEvents where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OutboxEvents where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OutboxEvents where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OutboxEvents where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OutboxEvents where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OutboxEvents where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OutboxEvents where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OutboxEvents whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OutboxEvents whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
