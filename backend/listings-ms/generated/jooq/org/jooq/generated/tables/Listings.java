/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import jakarta.annotation.Nullable;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.records.ListingsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Listings extends TableImpl<ListingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.listings</code>
     */
    public static final Listings LISTINGS = new Listings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListingsRecord> getRecordType() {
        return ListingsRecord.class;
    }

    /**
     * The column <code>public.listings.id</code>.
     */
    public final TableField<ListingsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.listings.created_at</code>.
     */
    public final TableField<ListingsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.listings.created_at_nano</code>.
     */
    public final TableField<ListingsRecord, Integer> CREATED_AT_NANO = createField(DSL.name("created_at_nano"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.listings.updated_at</code>.
     */
    public final TableField<ListingsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.listings.updated_at_nano</code>.
     */
    public final TableField<ListingsRecord, Integer> UPDATED_AT_NANO = createField(DSL.name("updated_at_nano"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.listings.owner_id</code>.
     */
    public final TableField<ListingsRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.listings.title</code>.
     */
    public final TableField<ListingsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.listings.description</code>.
     */
    public final TableField<ListingsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.listings.status</code>.
     */
    public final TableField<ListingsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.listings.photos</code>.
     */
    public final TableField<ListingsRecord, JSON> PHOTOS = createField(DSL.name("photos"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.listings.guests_capacity_adults</code>.
     */
    public final TableField<ListingsRecord, Integer> GUESTS_CAPACITY_ADULTS = createField(DSL.name("guests_capacity_adults"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.listings.guests_capacity_children</code>.
     */
    public final TableField<ListingsRecord, Integer> GUESTS_CAPACITY_CHILDREN = createField(DSL.name("guests_capacity_children"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.listings.guests_capacity_infants</code>.
     */
    public final TableField<ListingsRecord, Integer> GUESTS_CAPACITY_INFANTS = createField(DSL.name("guests_capacity_infants"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.listings.property_type</code>.
     */
    public final TableField<ListingsRecord, String> PROPERTY_TYPE = createField(DSL.name("property_type"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.listings.room_type</code>.
     */
    public final TableField<ListingsRecord, String> ROOM_TYPE = createField(DSL.name("room_type"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.listings.address_street</code>.
     */
    public final TableField<ListingsRecord, String> ADDRESS_STREET = createField(DSL.name("address_street"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.listings.address_city</code>.
     */
    public final TableField<ListingsRecord, String> ADDRESS_CITY = createField(DSL.name("address_city"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.listings.address_country</code>.
     */
    public final TableField<ListingsRecord, String> ADDRESS_COUNTRY = createField(DSL.name("address_country"), SQLDataType.VARCHAR(255), this, "");

    private Listings(Name alias, Table<ListingsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Listings(Name alias, Table<ListingsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.listings</code> table reference
     */
    public Listings(String alias) {
        this(DSL.name(alias), LISTINGS);
    }

    /**
     * Create an aliased <code>public.listings</code> table reference
     */
    public Listings(Name alias) {
        this(alias, LISTINGS);
    }

    /**
     * Create a <code>public.listings</code> table reference
     */
    public Listings() {
        this(DSL.name("listings"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ListingsRecord> getPrimaryKey() {
        return Keys.LISTINGS_PKEY;
    }

    @Override
    public Listings as(String alias) {
        return new Listings(DSL.name(alias), this);
    }

    @Override
    public Listings as(Name alias) {
        return new Listings(alias, this);
    }

    @Override
    public Listings as(Table<?> alias) {
        return new Listings(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Listings rename(String name) {
        return new Listings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Listings rename(Name name) {
        return new Listings(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Listings rename(Table<?> name) {
        return new Listings(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Listings where(Condition condition) {
        return new Listings(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Listings where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Listings where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Listings where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Listings where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Listings where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Listings where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Listings where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Listings whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Listings whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
