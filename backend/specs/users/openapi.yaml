openapi: "3.0.0"
info:
  version: "1.0.0"
  title: "Users  API"
  description: Describes the API of Users Endpoint

paths:
  /api/public/auth/token:
    post:
      tags:
        - commands
        - auth
      summary: Get a new pair of tokens (access, refresh)
      operationId: getNewTokensByEmail
      security: [ ]
      requestBody:
        description: JSON payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticateByEmailRequestBody"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTokenResponseBody"
  /api/public/auth/sign-up:
    post:
      tags:
        - commands
        - auth
      operationId: signUpByEmail
      summary: Sign up a new user
      security: [ ]
      requestBody:
        description: JSON payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpByEmailRequestBody"
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpByEmailResponseBody"
        "400":
          description: Wrong request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationErrorDTO"
        "409":
          description: Conflict - User with provided email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithSameEmailAlreadyExistsErrorDTO"

  /api/public/auth/token/verify:
    post:
      tags:
        - commands
        - auth
      operationId: verifyToken
      summary: Check if a token is valid
      security: [ ]
      requestBody:
        description: JSON payload
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
      responses:
        "200":
          description: Valid Token
        "401":
          description: Not valid Token

  /api/public/reset-password:
    post:
      tags:
        - commands
        - password
      operationId: resetPasswordByEmail
      summary: Reset password by email
      security: [ ]
      requestBody:
        description: JSON payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordByEmailRequestBody"
      responses:
        "200":
          description: Sent email with reset password instructions
        "401":
          description: Not valid email

  /api/with-auth/users/current/update-photo:
    post:
      tags:
        - commands
        - currentUser
      operationId: updateUserPhoto
      summary: "POST api/with-auth/users/current/update-photo"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserPhotoRequestBody"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /api/with-auth/users/current/get-upload-url-user-photo:
    post:
      tags:
        - commands
        - currentUser
      operationId: generateUploadUserPhototUrl
      summary: "POST api/with-auth/users/current/get-upload-url-user-photo"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateUploadUserPhotoUrlRequestBody"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GenerateUploadUserPhotoUrlResponseBody"

  /api/with-auth/users/current:
    get:
      tags:
        - queries
        - currentUser
      operationId: getCurrentUser
      summary: Gets current user info
      responses:
        "200":
          description: Current users info
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PersonalUserInfoDTO"
        "401":
          description: "Not valid Token"
components:
  schemas:
    SignUpByEmailRequestBody:
      type: object
      required:
        - fullName
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        fullName:
          $ref: "#/components/schemas/FullNameDTO"
    SignUpResponseBody:
      type: object
      required:
        - userId
        - tokens
      properties:
        userId:
          $ref: "#/components/schemas/UserIdDTO"
        tokens:
          $ref: "#/components/schemas/TokensPairDTO"
    GetTokenResponseBody:
      type: object
      required:
        - tokens
        - userId
      properties:
        userId:
          $ref: "#/components/schemas/UserIdDTO"
        tokens:
          $ref: "#/components/schemas/TokensPairDTO"
    ResetPasswordByEmailRequestBody:
      type: object
      required:
        - operationId
        - email
      properties:
        operationId:
          $ref: "#/components/schemas/OperationIdDTO"
        email:
          type: string
          format: email
    OperationIdDTO:
      type: string
      format: uuid
    UserIdDTO:
      type: string
      format: uuid
    TokensPairDTO:
      type: object
      required:
        - access
        - refresh
      properties:
        access:
          type: string
        refresh:
          type: string
    AuthenticateByEmailRequestBody:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    SignUpByEmailResponseBody:
      type: object
      required:
        - userId
        - tokens
      properties:
        userId:
          $ref: "#/components/schemas/UserIdDTO"
        tokens:
          $ref: "#/components/schemas/TokensPairDTO"
    FullNameDTO:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 255
        lastName:
          type: string
          minLength: 1
          maxLength: 255
    EmailVerificationStatusDTO:
      type: string
      enum:
        - VERIFIED
        - NOT_VERIFIED
    PersonalUserInfoDTO:
      type: object
      required:
        - id
        - fullName
        - email
        - emailVerificationStatus
      properties:
        id:
          type: string
          format: uuid
        fullName:
          $ref: "#/components/schemas/FullNameDTO"
        email:
          type: string
          format: email
        photo:
          $ref: "#/components/schemas/PhotoPathDTO"
        emailVerificationStatus:
            $ref: "#/components/schemas/EmailVerificationStatusDTO"
    ValidationErrorDTO:
      type: object
      required:
        - type
        - errors
      properties:
        type:
          type: string
          default: validationError
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ValidationErrorDetailsDTO"
    ValidationErrorDetailsDTO:
      type: object
      required:
        - path
        - message
        - code
      properties:
        path:
          type: string
        message:
          type: string
        code:
          type: string
    UserWithSameEmailAlreadyExistsErrorDTO:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          default: UserWithSameEmailAlreadyExists
        message:
          type: string
    GenerateUploadUserPhotoUrlRequestBody:
      type: "object"
      properties:
        idempotentOperationId:
          type: "string"
        fileName:
          type: "string"
        fileExtension:
          type: "string"
        fileSize:
          type: "integer"
          format: "int32"
    UpdateUserPhotoRequestBody:
      type: "object"
      required:
        - idempotentOperationId
        - bucketName
        - objectName
      properties:
        idempotentOperationId:
          type: "string"
        uploadedFile:
          $ref: "#/components/schemas/UploadedFileDataDTO"
    UploadedFileDataDTO:
      type: "object"
      required:
        - url
        - bucketName
        - objectName
      properties:
        url:
          type: "string"
        bucketName:
          type: "string"
        objectName:
          type: "string"
    GenerateUploadUserPhotoUrlResponseBody:
      type: "object"
      required:
        - objectPath
        - formData
      properties:
        objectPath:
          $ref: "#/components/schemas/UploadedFileDataDTO"
        formData:
          type: "object"
    PhotoPathDTO:
      type: "object"
      properties:
        url:
          type: "string"
    ErrorDTO:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
    ErrorsDTO:
      type: array
      items:
        $ref: "#/components/schemas/ErrorDTO"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: [ ]
