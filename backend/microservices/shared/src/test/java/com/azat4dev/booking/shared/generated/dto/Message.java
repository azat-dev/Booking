/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.azat4dev.booking.shared.generated.dto;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Message extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1428517755530002275L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Message\",\"namespace\":\"com.azat4dev.booking.shared.generated.dto\",\"fields\":[{\"name\":\"messageType\",\"type\":\"string\"},{\"name\":\"messageId\",\"type\":\"string\"},{\"name\":\"correlationId\",\"type\":[\"string\",\"null\"]},{\"name\":\"replyToId\",\"type\":[\"string\",\"null\"]},{\"name\":\"payload\",\"type\":[{\"type\":\"record\",\"name\":\"JoinedMessage\",\"fields\":[{\"name\":\"messageId1\",\"type\":\"string\"},{\"name\":\"messageId2\",\"type\":\"string\"}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Message> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Message> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Message> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Message> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Message> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Message to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Message from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Message instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Message fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence messageType;
  private java.lang.CharSequence messageId;
  private java.lang.CharSequence correlationId;
  private java.lang.CharSequence replyToId;
  private java.lang.Object payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Message() {}

  /**
   * All-args constructor.
   * @param messageType The new value for messageType
   * @param messageId The new value for messageId
   * @param correlationId The new value for correlationId
   * @param replyToId The new value for replyToId
   * @param payload The new value for payload
   */
  public Message(java.lang.CharSequence messageType, java.lang.CharSequence messageId, java.lang.CharSequence correlationId, java.lang.CharSequence replyToId, java.lang.Object payload) {
    this.messageType = messageType;
    this.messageId = messageId;
    this.correlationId = correlationId;
    this.replyToId = replyToId;
    this.payload = payload;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return messageType;
    case 1: return messageId;
    case 2: return correlationId;
    case 3: return replyToId;
    case 4: return payload;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: messageType = (java.lang.CharSequence)value$; break;
    case 1: messageId = (java.lang.CharSequence)value$; break;
    case 2: correlationId = (java.lang.CharSequence)value$; break;
    case 3: replyToId = (java.lang.CharSequence)value$; break;
    case 4: payload = value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'messageType' field.
   * @return The value of the 'messageType' field.
   */
  public java.lang.CharSequence getMessageType() {
    return messageType;
  }


  /**
   * Sets the value of the 'messageType' field.
   * @param value the value to set.
   */
  public void setMessageType(java.lang.CharSequence value) {
    this.messageType = value;
  }

  /**
   * Gets the value of the 'messageId' field.
   * @return The value of the 'messageId' field.
   */
  public java.lang.CharSequence getMessageId() {
    return messageId;
  }


  /**
   * Sets the value of the 'messageId' field.
   * @param value the value to set.
   */
  public void setMessageId(java.lang.CharSequence value) {
    this.messageId = value;
  }

  /**
   * Gets the value of the 'correlationId' field.
   * @return The value of the 'correlationId' field.
   */
  public java.lang.CharSequence getCorrelationId() {
    return correlationId;
  }


  /**
   * Sets the value of the 'correlationId' field.
   * @param value the value to set.
   */
  public void setCorrelationId(java.lang.CharSequence value) {
    this.correlationId = value;
  }

  /**
   * Gets the value of the 'replyToId' field.
   * @return The value of the 'replyToId' field.
   */
  public java.lang.CharSequence getReplyToId() {
    return replyToId;
  }


  /**
   * Sets the value of the 'replyToId' field.
   * @param value the value to set.
   */
  public void setReplyToId(java.lang.CharSequence value) {
    this.replyToId = value;
  }

  /**
   * Gets the value of the 'payload' field.
   * @return The value of the 'payload' field.
   */
  public java.lang.Object getPayload() {
    return payload;
  }


  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(java.lang.Object value) {
    this.payload = value;
  }

  /**
   * Creates a new Message RecordBuilder.
   * @return A new Message RecordBuilder
   */
  public static com.azat4dev.booking.shared.generated.dto.Message.Builder newBuilder() {
    return new com.azat4dev.booking.shared.generated.dto.Message.Builder();
  }

  /**
   * Creates a new Message RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Message RecordBuilder
   */
  public static com.azat4dev.booking.shared.generated.dto.Message.Builder newBuilder(com.azat4dev.booking.shared.generated.dto.Message.Builder other) {
    if (other == null) {
      return new com.azat4dev.booking.shared.generated.dto.Message.Builder();
    } else {
      return new com.azat4dev.booking.shared.generated.dto.Message.Builder(other);
    }
  }

  /**
   * Creates a new Message RecordBuilder by copying an existing Message instance.
   * @param other The existing instance to copy.
   * @return A new Message RecordBuilder
   */
  public static com.azat4dev.booking.shared.generated.dto.Message.Builder newBuilder(com.azat4dev.booking.shared.generated.dto.Message other) {
    if (other == null) {
      return new com.azat4dev.booking.shared.generated.dto.Message.Builder();
    } else {
      return new com.azat4dev.booking.shared.generated.dto.Message.Builder(other);
    }
  }

  /**
   * RecordBuilder for Message instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Message>
    implements org.apache.avro.data.RecordBuilder<Message> {

    private java.lang.CharSequence messageType;
    private java.lang.CharSequence messageId;
    private java.lang.CharSequence correlationId;
    private java.lang.CharSequence replyToId;
    private java.lang.Object payload;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.azat4dev.booking.shared.generated.dto.Message.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.messageType)) {
        this.messageType = data().deepCopy(fields()[0].schema(), other.messageType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.messageId)) {
        this.messageId = data().deepCopy(fields()[1].schema(), other.messageId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[2].schema(), other.correlationId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.replyToId)) {
        this.replyToId = data().deepCopy(fields()[3].schema(), other.replyToId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.payload)) {
        this.payload = data().deepCopy(fields()[4].schema(), other.payload);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Message instance
     * @param other The existing instance to copy.
     */
    private Builder(com.azat4dev.booking.shared.generated.dto.Message other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.messageType)) {
        this.messageType = data().deepCopy(fields()[0].schema(), other.messageType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.messageId)) {
        this.messageId = data().deepCopy(fields()[1].schema(), other.messageId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[2].schema(), other.correlationId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.replyToId)) {
        this.replyToId = data().deepCopy(fields()[3].schema(), other.replyToId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.payload)) {
        this.payload = data().deepCopy(fields()[4].schema(), other.payload);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'messageType' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessageType() {
      return messageType;
    }


    /**
      * Sets the value of the 'messageType' field.
      * @param value The value of 'messageType'.
      * @return This builder.
      */
    public com.azat4dev.booking.shared.generated.dto.Message.Builder setMessageType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.messageType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'messageType' field has been set.
      * @return True if the 'messageType' field has been set, false otherwise.
      */
    public boolean hasMessageType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'messageType' field.
      * @return This builder.
      */
    public com.azat4dev.booking.shared.generated.dto.Message.Builder clearMessageType() {
      messageType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'messageId' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessageId() {
      return messageId;
    }


    /**
      * Sets the value of the 'messageId' field.
      * @param value The value of 'messageId'.
      * @return This builder.
      */
    public com.azat4dev.booking.shared.generated.dto.Message.Builder setMessageId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.messageId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'messageId' field has been set.
      * @return True if the 'messageId' field has been set, false otherwise.
      */
    public boolean hasMessageId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'messageId' field.
      * @return This builder.
      */
    public com.azat4dev.booking.shared.generated.dto.Message.Builder clearMessageId() {
      messageId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'correlationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCorrelationId() {
      return correlationId;
    }


    /**
      * Sets the value of the 'correlationId' field.
      * @param value The value of 'correlationId'.
      * @return This builder.
      */
    public com.azat4dev.booking.shared.generated.dto.Message.Builder setCorrelationId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.correlationId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'correlationId' field has been set.
      * @return True if the 'correlationId' field has been set, false otherwise.
      */
    public boolean hasCorrelationId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'correlationId' field.
      * @return This builder.
      */
    public com.azat4dev.booking.shared.generated.dto.Message.Builder clearCorrelationId() {
      correlationId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'replyToId' field.
      * @return The value.
      */
    public java.lang.CharSequence getReplyToId() {
      return replyToId;
    }


    /**
      * Sets the value of the 'replyToId' field.
      * @param value The value of 'replyToId'.
      * @return This builder.
      */
    public com.azat4dev.booking.shared.generated.dto.Message.Builder setReplyToId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.replyToId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'replyToId' field has been set.
      * @return True if the 'replyToId' field has been set, false otherwise.
      */
    public boolean hasReplyToId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'replyToId' field.
      * @return This builder.
      */
    public com.azat4dev.booking.shared.generated.dto.Message.Builder clearReplyToId() {
      replyToId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * @return The value.
      */
    public java.lang.Object getPayload() {
      return payload;
    }


    /**
      * Sets the value of the 'payload' field.
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public com.azat4dev.booking.shared.generated.dto.Message.Builder setPayload(java.lang.Object value) {
      validate(fields()[4], value);
      this.payload = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'payload' field.
      * @return This builder.
      */
    public com.azat4dev.booking.shared.generated.dto.Message.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Message build() {
      try {
        Message record = new Message();
        record.messageType = fieldSetFlags()[0] ? this.messageType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.messageId = fieldSetFlags()[1] ? this.messageId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.correlationId = fieldSetFlags()[2] ? this.correlationId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.replyToId = fieldSetFlags()[3] ? this.replyToId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.payload = fieldSetFlags()[4] ? this.payload :  defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Message>
    WRITER$ = (org.apache.avro.io.DatumWriter<Message>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Message>
    READER$ = (org.apache.avro.io.DatumReader<Message>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










